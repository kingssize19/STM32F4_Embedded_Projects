Bu kod, STM32F4 serisi bir mikrodenetleyici kullanarak bir LED 'in saniyede bir kez yanıp sönmesini sağlar. Kodun tüm bileşenlerini ve kullanılan registerları detaylı şekilde açıklayalım.
Not : TIMER_ARR makrosunun değerini değiştirerek ledin yanıp sönme süresini ayarlayabilirsiniz.

1. Sistem Saat Yapılandırması (System_Clock_Config())

   // 1. HSE 'yi etkinleştir ve hazır olmasını bekle
   RCC->CR |= RCC_CR_HSEON;
   while (!(RCC->CR & RCC_CR_HSERDY));

   RCC->CR (Clock Control Register)
   - RCC_CR_HSEON (Bit 16)  :  High-Speed External (HSE) kristalini etkinleştirir. HSE, mikrodenetleyicinin yüksek frekansta çalışmasını sağlar.
   - RCC_CR_HSERDY (Bit 17) : HSE'nin çalışmaya başladığını gösteren bayrak. "while (!(RCC->CR & RCC_CR_HSERDY));" satırı, HSE' nin hazır olmasını bekler.
   -----------------------------------------------------------------o----------------------------------------------------------------------
   // 2. Güç ve Voltaj Regülatörünü ayarla
   RCC->APB1ENR |= RCC_APB1ENR_PWREN;
   PWR->CR |= PWR_CR_VOS;

   RCC->APB1ENR (APB1 Peripheral Clock Enable Register)
   - RCC_APB1ENR_PWREN (Bit 28) : Power Control (PWR) saatini etkinleştirir. Bu, PWR kayıtlarını yapılandırmak için gerekli olan saati açar.
   
   PWR->CR (Power Control Register)
   - PWR_CR_VOS (Bits 14 - 15) : Voltaj ölçekleme modunu seçer. Bu mod, işlemcinin güç tüketimini ve çalışma voltajını belirler.
   -----------------------------------------------------------------o----------------------------------------------------------------------
   // 3. FLASH ayarlarını yapılandır
   FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;

   FLASH->ACR (Flash Access Control Register)
   - FLASH_ACR_ICEN (Bit 9)   : Flash komut önbelleğini etkinleştirir. Bu, komutların daha hızlı işlenmesini sağlar.
   - FLASH_ACR_DCEN (Bit 10)  : Flash veri önbelleğini etkinleştirir. Bu, veri okuma hızını artırır.
   - FLASH_ACR_PRFTEN (Bit 8) : Flash ön belleklemeyi etkinleştirir. Ön bellekleme, daha hızlı veri erişimi sağlar.
   - FLASH_ACR_LATENCY_5WS (Bits 0 - 2) : Flash bellek erişim gecikmesini 5 "hızlı" döngüye ayarlar. Bu, yüksek hızda çalışan işlemciler için gerekli gecikmeyi belirler.

   -----------------------------------------------------------------o----------------------------------------------------------------------
   // 4. Saat Bölücülerini ayarla
   RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
   RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
   RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;

   RCC->CFGR (Clock Configuration Register)
   - RCC_CFGR_HPRE_DIV1 (Bits 4 - 7) : AHB saat bölücüsünü 1 olarak ayarlar. AHB saatinin herhangi bir bölünmesini engeller.
   - RCC_CFGR_PPRE1_DIV4 (Bits 10 - 12) : APB1 saat bölücüsünü 4 olarak ayarlar. APB1 saatinin 4'e bölünmesini sağlar.
   - RCC_CFGR_PPRE2_DIV2 (Bits 13 - 15) : APB2 saat bölücüsünü 2 olarak ayarlar. APB2 saatinin 2 ye bölünmesini sağlar.
   -----------------------------------------------------------------o----------------------------------------------------------------------
   // 5. PLL' i yapılandır.
   RCC->PLLCFGR |= (PLL_M << 0);
   RCC->PLLCFGR |= (PLL_N << 6);
   RCC->PLLCFGR |= (PLL_P << 16);
   RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;

   RCC->PLLCFGR (PLL Configuration Register)
   - PLL_M (Bits 0 - 5)   : PLL giriş saatini belirlemek için bölücü. 'PLL_M' değeri 4 olarak ayarlanmıştır.
   - PLL_N (Bits 6 - 14)  : PLL çarpan değeri. 'PLL_N' değeri 180 olarak ayarlanmıştır.
   - PLL_P (Bits 16 - 17) : PLL çıkış saatini belirlemek için bölücü. 'PLL_N' değeri 2 olarak ayarlanmıştır. (0: PLLP = 2, 1: PLLP = 4, 2:PLLP = 6, 3:PLLP = 8)
   - RCC_PLLCFGR_PLLSRC_HSE (Bit 22) : PLL saat kaynağını HSE olarak seçer.
   -----------------------------------------------------------------o----------------------------------------------------------------------
   // 6. PLL 'i etkinleştir ve hazır olmasını bekle.
   RCC->CR |= RCC_CR_PLLON;
   while (!(RCC->CR & RCC_CR_PLLRDY));

   RCC->CR (Clock Control Register)
   - RCC_CR_PLLON (Bit 24)  : PLL 'i etkinleştir.
   - RCC_CR_PLLRDY (Bit 25) : PLL 'in hazır olduğunu belirten bayrak. Bu bayrağı kontrol ederek PLL 'in tamamen hazır olup olmadığını bekleriz.
   -----------------------------------------------------------------o----------------------------------------------------------------------
   // 7. Saat kaynağını seç ve geçişin tamamlanmasını bekle
   RCC->CFGR |= RCC_CFGR_SW_PLL;
   while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);

   RCC->CFGR (Clock Control Register) 
   - RCC_CFGR_SW_PLL (Bits 0 - 1)  : Sistemin saat kaynağı olarak PLL 'yi seçer.
   - RCC_CFGR_SWS_PLL (Bits 2 - 3) : PLL 'nin sistem saat kaynağı olarak kullanıldığını belirten bayrak.
   -----------------------------------------------------------------o----------------------------------------------------------------------

2. GPIO Konfigürasyonu (GPIO_Config())

   // 1. GPIO saatini etkinleştir.
   RCC->AHB1ENR |= (1 << 0);

   RCC->AHB1ENR (AHB1 Peripheral Clock Enable Register)
   - RCC_AHB1ENR_GPIOAEN (Bit 0) : GPIOA saatini etkinleştirir. GPIOA' nın saat kaynağını açar.
   -----------------------------------------------------------------o----------------------------------------------------------------------
   // 2. Pinleri çıkış olarak ayarla.
   GPIOA->MODER |= (1 << 10);

   GPIOA->MODER (GPIO Port Mode Register)
   - GPIO_MODER_MODE5_0 (Bits 10 - 11) : PA5 pinini çıkış olarak yapılandırır. "1 << 10" ifadesi, PA5 'in çıkış modunu seçer.
   -----------------------------------------------------------------o----------------------------------------------------------------------
   // 3. Çıkış modunu yapılandır.
   GPIOA->OTYPER |= (0 << 5);
   GPIOA->OSPEEDR |= (2 << 10);

   GPIOA->OTYPER (GPIO Port Output Type Register)
   - GPIO_OTYPER_OT5 (Bit 5) : PA5 pininin çıkış türünü belirler. "0" olarak ayarlandığında, pin push-pull (yani iki yönlü çıkış) olarak yapılandırılır.

   GPIOA->OSPEEDR (GPIO Port Output Speed Register)
   - GPIO_OSPEEDR_OSPEEDR5 (Bits 10 - 11) : PA5 pininin hızını belirler. "2" olarak ayarlandığında, pin yüksek hızda çalışır.
   -----------------------------------------------------------------o----------------------------------------------------------------------

3. TIMER Konfigürasyonu (Timer_Config())

   //1. Timer saatini etkinleştir.
   RCC->APB1ENR |= (1 << 0);

   RCC->APB1ENR (APB1 Peripheral Clock Enable Register)
   - RCC_APB1ENR_TIM2EN (Bit 0) : TIM2 saatini etkinleştirir. TIM2 'nin çalışması için gerekli olan saati açar.
   -----------------------------------------------------------------o----------------------------------------------------------------------
   // 2. Timer ayarları.
   TIM2->PSC = TIMER_PRESCALER;      //PRESCALER
   TIM2->ARR = TIMER_ARR;            //Auto-reload register

   TIM2->PSC (Timer Prescaler Register)
   - Timer'ın saat frekansını Bölmek için kullanılır. "TIMER_PRESCALER" değeri 17999 olarak ayarlanır. Bu, timer'ın saat frekansını bölerek uygun zaman aralığını sağlar.

   TIM2->ARR (Timer Auto-reload Register)
   - Timer'ın sayacağı maksimum değeri belirler. "TIMER_ARR" değeri 999 olarak ayarlanır. Timer, bu değere ulaştığında sıfırlanır ve kesme üretir.
   -----------------------------------------------------------------o----------------------------------------------------------------------
   // 3. Timer kesmelerini etkinleştir.
   TIM2->DIER |= TIM_DIER_UIE;      // Güncelleme kesme izni
   NVIC_EnableIRQ(TIM2_IRQn);      // Timer 2 kesmesini NVIC 'te etkinleştir.

   TIM->DIER (Timer DMA/Interrupt Enable Register)
   - TIM_DIER_UIE (Bit 0) : Timer güncelleme kesmesini etkinleştirir. Timer sayacı sıfırlandığında bir kesme üretir.

   NVIC_EnabelIRQ(TIM2_IRQn) 
   - NVIC (Nested Vectored Interrupt Controller) üzerinden TIM2 kesmelerini etkinleştirir.
   -----------------------------------------------------------------o----------------------------------------------------------------------
   // 4. Timer 'ı başlat.
   TIM2->CR1 |= TIM_CR1_CEN;

   TIM2->CR1 (Timer Control Register 1)
   - TIM_CR1_CEN (Bit 0) : Timer'ı başlatır. Timer çalışmaya başlar ve ayarlanan süre boyunca çalışır.
   -----------------------------------------------------------------o----------------------------------------------------------------------

4. Timer Kesme İşleyicisi (TIM2_IRQHandler())

   if (TIM2->SR & TIM_SR_UIF) {      // Güncelleme kesme bayrağını kotnrol et
      TIM2->SR &= ~TIM_SR_UIF;      // Kesme bayrağını temizle

      // LED durumunu değiştir
      GPIOA->ODR ^= (1 << 5);
   }

   TIM2->SR (Timer Status Register)
   - TIM_SR_UIF (Bit 0) : Güncelleme kesme bayrağı. Timer sıfırlandığında bu bayrak ayarlanır.

   - TIM2->SR &= ~TIM_SR_UIF : Kesme bayrağını temizler, böylece yeni bir kesme oluşturabilir.

   GPIOA->ODR (GPIO Port Output Data Register)
   - GPIO_ODR_OD5 (Bit 5) : PA5 pininin durumunu değiştirir. ' ^= ' operatörü kullanılarak pinin mevcut durumu tersine çevrilir (LED 'in yanıp sönmesi sağlanır.)
   -----------------------------------------------------------------o----------------------------------------------------------------------













   




















