                                                                      STM32F446RE Nucleo Kartında Clock (Saat) Konfigürasyonu 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

->  STM32F446RE, yüksek performanslı ARM Cortex-M4 çekirdeğine sahip bir mikrodenetleyicidir ve saat (clock) yapılandırılması, mikrodenetleyicinin performansını, güç tüketimini ve belirli görevlerdeki doğruluğunu
    doğrudan etkiler. Bu yapılandırma, saat sinyalinin kaynağını ve frekansını belirler. Bu nedenle saat (clock) yapılandırması, mikrodenetleyicinin performansını optimize etmek için oldukça önemlidir.


1. GENEL SAAT (CLOCK) YAPISI
----------------------------

-> STM32F446RE'nin saat sistemi, farklı alt sistemler ve çevresel birimlere saat sinyali sağlamak için birden fazla saat kaynağını kullanır. Bu saat kaynakları şunlardır:

  * HSE (High-Speed External Clock) : Dış kaynaktan gelen yüksek hızlı saat sinyali (genellikle bir kristal osilatör veya harici saat sinyali).

  * HSI (High-Speed Internal Clock) : STM32F446RE'nin iç osilatörü tarafından sağlanan yüksek hızlı saat sinyali (16 MHz).

  * LSE (Low-Speed External Clock) : Dış kaynaktan gelen düşük hızlı saat sinyali (genellikle bir 32.768 kHz kristal osilatör).

  * LSI (Low-Speed Internal Clock) : İç osilatör tarafından sağlanan düşük hızlı saat sinyali (yaklaşık 32 kHz).

  * PLL (Phase-Locked Loop) : Çıkış frekansını yükseltmek veya sabitlemek için kullanılan bir frekans çarpanı.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. SAAT KAYNAKLARI
------------------

-> STM32F446RE'nin farklı saat kaynakları vardır. Her biri belirli durumlar için farklı avantajlar sağlar:

  * HSI (16 MHz) : İçten gelen yüksek hızlı saat sinyalidir ve genellikle düşük güç uygulamalarında kullanılır.

  * HSE (4-26 MHz) : Harici bir kristal veya osilatör tarafından sağlanan yüksek hızlı saat sinyalidir. Yüksek hassasiyet gerektiren uygulamalarda kullanılır.

  * PLL : Saat frekansını artırmak için kullanılır. Örneğin, HSI veya HSE sinyalini daha yüksek bir frekansa çevirebilir.

  * LSI (32 kHz) : İç osilatör tarafından sağlanan düşük hızlı saat sinyali, genellikle Watchdog Timer ve RTC gibi düşük güç uygulamaları için kullanılır.

  * LSE (32.768 kHz) : Harici bir kristal tarafından sağlanan düşük hızlı saat sinyalidir ve genellikle RTC (Real-Time Clock) için kullanılır.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. SAAT AĞACI (CLOCK TREE)
--------------------------

-> STM32 mikrodenetleyicilerinde saat sinyali, saat ağacı (clock tree) adı verilen bir yapı ile dağıtılır. Bu yapı, her çevresel birim için hangi saat kaynağının kullanılacağını belirler.

  * SYSCLK (Sistem Saati) : Mikrodenetleyicinin ana çalışma frekansıdır. Bu saat, HSE, HSI veya PLL gibi bir kaynaktan sağlanabilir.
   
      SYSCLK = ((HSE / PLL_M) * PLL_N) / PLL_P

  * HCLK (AHB Clock) : AHB bus (Advanced High-Performance Bus) saat sinyalidir. AHB bus, CPU ve yüksek hızlı çevresel birimlerin bağlı olduğu ana bus'tır.

  * PCLK1 ve PCLK2 : APB1 ve APB2 bus'ları için saat sinyalleridir. Bu bus'lar düşük hızlı çevresel birimler için kullanılır.

  * USB, SDIO, RNG Saatleri : USB, SDIO (Secure Digital Input Output) ve rastgele sayı üretici (Random Number Generator) gibi çevresel birimler için ayrı saat sinyalleri gereklidir.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4. SAAT KONFİGURASYON ADIMLARI
------------------------------

-> Saat yapılandırması genellikle şu adımlarla yapılır : 

4.1 HSI veya HSE Seçimi
-----------------------

-> Sistem saati olarak HSI veya HSE seçilebilir. HSE daha kararlı ve kesin bir frekans sağlarken, HSI dahili bir osilatör olduğu için ekstra donanım gerektirmez.

4.2 PLL Yapılandırması
----------------------

-> PLL, HSI veya HSE sinyalini çarparak daha yüksek frekanslı bir sinyal elde eder. STM32F446RE'de, PLL'nin çıkış frekansı 180 MHz'e kadar çıkabilir. PLL'in yapılandırılması şu parametrelerle yapılır.

  * PLLM : HSI veya HSE frekansını böler.
  * PLLN : Bölünen frekansı çarpar.
  * PLLP : PLL çıkış frekansını daha düşük bir frekansa böler.
  * PLLQ : USB, RNG ve SDIO gibi çevresel birimlere saat sağlamak için kullanılır.


4.3 Saat Kaynağının SYSCLK Olarak Seçilmesi
-------------------------------------------

-> PLL, HSE veya HSI kaynağı SYSCLK olarak seçilir. Bu seçim, mikrodenetleyicinin çalışma frekansını belirler.


4.4 AHB, APB1 ve APB2 Saatlerinin Yapılandırılması
--------------------------------------------------

-> HCLK, PCLK1 ve PCLK2 gibi bu saat sinyalleri yapılandırılır. Bu yapılandırma, CPU ve çevresel birimlerin çalışma hızlarını ayarlar.

  * HCLK : AHB bus için saat sinyalidir ve genellikle SYSCLK' dan türetilir.

  * PCLK1 : APB1 bus için saat sinyalidir. AHB saat sinyalinden türetilir ve en fazla HCLK'nın yarısı kadar olabilir.

  * PCLK2 : APB2 bus için saat sinyalidir. AHB saat sinyalinden türetilir ve en fazla HCLK kadar olabilir.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5. Pratikte Saat Konfigürasyonu
-------------------------------

-> STM32F446RE Nucleo kartında saat konfigürasyonu yaparken, CubeMX aracı kullanarak saat ağacını (clock tree) görsel olarak yapılandırabilirsiniz. CubeMX, saat kaynağını ve çarpanlarını seçmenize, ardından bu
   yapılandırmayı doğrulamanıza olanak tanır.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6. Kodla Saat Konfigürasyonu (CubeMX veya Manuel)
-------------------------------------------------

-> Eğer CubeMX kullanıyorsanız, bu araç saat yapılandırmasını otomatik olarak oluşturur. Manuel yapılandırma yapmak istiyorsanız, STM32 Standart Peripheral Library veya Hal kütüphanelerini kullanabilirsiniz.
   Aşağıda temel bir saat yapılandırma örneği verilmiştir.

  //SPL Code
  void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    // HSE'yi etkinleştir ve PLL'yi yapılandır
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 336;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 7;
    HAL_RCC_OscConfig(&RCC_OscInitStruct);

    // AHB, APB1 ve APB2 clock yapılandırması
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);

    // Sistem saati (SYSCLK) yapılandırmasını kontrol et
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
}
-------------------------------------------------------------------------------
//Register Level
void SystemClock_Config(void)
{
    // 1. HSE'yi etkinleştir
    RCC->CR |= RCC_CR_HSEON;                 // HSE'yi etkinleştir
    while (!(RCC->CR & RCC_CR_HSERDY));      // HSE'nin hazır olmasını bekle

    // 2. PLL ayarları
    RCC->PLLCFGR = 0;                       // İlk olarak PLLCFGR'i sıfırla
    
    // PLL yapılandırması
    RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);  // PLLM = 8
    RCC->PLLCFGR |= (336 << RCC_PLLCFGR_PLLN_Pos); // PLLN = 336
    RCC->PLLCFGR |= (RCC_PLLCFGR_PLLP_0);        // PLLP = 2 (RCC_PLLCFGR_PLLP_0 = 1 << 16)
    RCC->PLLCFGR |= (7 << RCC_PLLCFGR_PLLQ_Pos);  // PLLQ = 7
    RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;       // PLL kaynak olarak HSE seç
    
    RCC->CR |= RCC_CR_PLLON;                     // PLL'yi etkinleştir
    while (!(RCC->CR & RCC_CR_PLLRDY));          // PLL'nin hazır olmasını bekle

    // 3. AHB, APB1 ve APB2 saat yapılandırması
    RCC->CFGR |= RCC_CFGR_SW_PLL;              // Sistem saat kaynağı olarak PLL seç
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL); // PLL'nin saat kaynağı olarak seçildiğini doğrula
    
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;           // AHB saat bölücüsünü 1 olarak ayarla (AHB_CLK = SYSCLK)
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;          // APB1 saat bölücüsünü 4 olarak ayarla (APB1_CLK = AHB_CLK / 4)
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;          // APB2 saat bölücüsünü 2 olarak ayarla (APB2_CLK = AHB_CLK / 2)

    // 4. SysTick yapılandırması
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);  // SysTick zamanlayıcısını 1 ms aralıkla yapılandır
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); // SysTick saat kaynağını HCLK olarak ayarla
}


1. HSE'yi Etkinleştir ve PLL'yi Yapılandır

Register Tanımları:

RCC->CR (Clock Control Register)

-> RCC_CR_HSEON (Bit 16): HSE'yi etkinleştirir.
-> RCC_CR_PLLON (Bit 24): PLL'yi etkinleştirir.
-> RCC_CR_HSERDY (Bit 17): HSE'nin hazır olduğunu gösterir.
-> RCC_CR_PLLRDY (Bit 25): PLL'nin hazır olduğunu gösterir.
-> RCC->PLLCFGR (PLL Configuration Register):

-> RCC_PLLCFGR_PLLM (Bits 0-5): PLL giriş bölücüsü, 8 << RCC_PLLCFGR_PLLM_Pos olarak ayarlanır.
-> RCC_PLLCFGR_PLLN (Bits 6-14): PLL çarpanı, 336 << RCC_PLLCFGR_PLLN_Pos olarak ayarlanır.
-> RCC_PLLCFGR_PLLP (Bits 16-17): PLL çıkış bölücüsü, RCC_PLLCFGR_PLLP_0 (yani, 2) olarak ayarlanır.
-> RCC_PLLCFGR_PLLQ (Bits 24-27): PLL Q bölücüsü, 7 << RCC_PLLCFGR_PLLQ_Pos olarak ayarlanır.
-> RCC_PLLCFGR_PLLSRC_HSE (Bit 22): PLL kaynak olarak HSE seçer.


2. AHB, APB1 ve APB2 Clock Konfigürasyonu

Register Tanımları:

RCC->CFGR (Clock Configuration Register)

-> RCC_CFGR_SW_PLL (Bits 0-1): Sistem saat kaynağı olarak PLL'yi seçer.
-> RCC_CFGR_SWS_PLL (Bits 2-3): PLL'nin sistem saat kaynağı olarak kullanıldığını belirten bayrak.
-> RCC_CFGR_HPRE (Bits 4-7): AHB saat bölücüsünü ayarlar, RCC_CFGR_HPRE_DIV1 (bölücüsü 1) olarak ayarlandı.
-> RCC_CFGR_PPRE1 (Bits 10-12): APB1 saat bölücüsünü ayarlar, RCC_CFGR_PPRE1_DIV4 (bölücüsü 4) olarak ayarlandı.
-> RCC_CFGR_PPRE2 (Bits 13-15): APB2 saat bölücüsünü ayarlar, RCC_CFGR_PPRE2_DIV2 (bölücüsü 2) olarak ayarlandı.


3. SysTick Konfigürasyonu

SysTick Konfigürasyon Registerları

-> HAL_SYSTICK_Config(): SysTick zamanlayıcısının periyodunu yapılandırır. HAL_RCC_GetHCLKFreq()/1000 ifadesi, SysTick'in her 1 ms'de bir kesme üretmesini sağlar (HCLK frekansına bağlı olarak).
-> HAL_SYSTICK_CLKSourceConfig(): SysTick saat kaynağını belirler. SYSTICK_CLKSOURCE_HCLK ifadesi, SysTick saat kaynağını HCLK olarak ayarlar.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7. Power Consumption (Güç Tüketimi)
-----------------------------------

-> Yüksek saat frekansı, yüksek güç tüketimine yol açabilir. STM32F446RE'de düşük güç modları ve düşük frekanslı saat kaynakları, güç tüketimini minimumda tutmak için kullanılabilir.
   Örneğin, uyku modunda HSI yerine LSI kullanılabilir.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

8. Senkronizasyon ve Zamanlayıcılar
-----------------------------------

-> Bazı çevresel birimler, belirli zamanlama gereksinimlerine sahiptir. Saat kaynaklarının doğru seçimi, ADC (Analog-to-Digital Converter) gibi zamanlama kritik işlemlerin doğruluğunu etkileyebilir.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

9. Gelişmiş Konfigürasyon
-------------------------

-> Çoklu PLL'ler, dinamik saat değişiklikleri ve farklı buslar için ayrı saat frekansları gibi gelişmiş konfigürasyonlar, daha karmaşık uygulamalarda kullanılabilir. Bu yapılandırmalar, sistem performansını
   optimize etmek ve güç tüketimini dengelemek için yapılır.

  
